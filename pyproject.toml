[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "Xboing"
version = "0.2.0"
description = "XBoing - A classic breakout-style game modernized with Python and Pygame"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "X Consortium License"}
authors = [
    {name = "Original: Justin C. Kibell"},
    {name = "Python port: XBoing-py Team"}
]
dependencies = [
    "pygame",
    "injector>=0.21.0",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Games/Entertainment :: Arcade",
    "Intended Audience :: End Users/Desktop",
]

[project.urls]
"Homepage" = "https://github.com/jmf-pobox/xboing-python"
"Bug Tracker" = "https://github.com/jmf-pobox/xboing-python/issues"

[project.scripts]
xboing = "main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]
include-package-data = true

[tool.hatch.build]
exclude = [
    ".gitignore",
    "tests/",
    "scripts/",
    "docs/",
]

# Asset inclusion is handled automatically by include-package-data in wheel target

[tool.hatch.version]
path = "src/__version__.py"

[tool.hatch.envs.default]
dependencies = [
    # Testing
    "pytest",
    "pytest-cov",
    # Code quality
    "mypy",
    "ruff",
    "black",
    # Dev tools
    "pillow",
]
path = ".venv"

[tool.hatch.envs.default.scripts]
test = "pytest tests/unit"
cov = "pytest --cov-report=term-missing --cov=src {args:tests/}"
game = "python -m src.main"
# Code quality commands
lint = "ruff check src/ tests/"
lint-fix = "ruff check --fix src/ tests/"
format = "black src/ tests/ scripts/"
format-check = "black --check src/ tests/ scripts/"
typecheck = "mypy src/"
# Combined quality check
check = [
    "format-check",
    "lint",
    "typecheck"
]
# Combined fixing command
fix = [
    "format",
    "lint-fix"
]
count-lines = "python -c \"import pathlib; print(sum(1 for f in pathlib.Path('src').rglob('*.py') for _ in open(f)))\""

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"

# Black configuration
[tool.black]
# Aligned with pylint and ruff: 88 chars, Python 3.8
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
# Aligned with pylint and black: 88 chars, Python 3.8
line-length = 88
target-version = "py38"

[tool.ruff.lint]
# Maximum strictness: enable all major rulesets, including pylint, docstring, naming, complexity, etc.
# Docstring style: PEP 257-aligned (D211, D212 enforced; D203, D213 ignored)
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "UP",   # pyupgrade
    "PL",   # pylint ruleset
    "D",    # pydocstyle (docstring style)
    "N",    # pep8-naming
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "A",    # flake8-builtins
    "C90",  # mccabe (complexity)
]
ignore = [
    "E203",  # Whitespace before ':' (black compatibility)
    "E501",  # Line too long (handled by black)
    "D203",  # Ignore: prefer D211 (no blank line before class docstring)
    "D213",  # Ignore: prefer D212 (multi-line summary on first line)
]
per-file-ignores = { "__init__.py" = ["F401"] }

# MyPy configuration 
[tool.mypy]
# Maximum strictness, check tests as strictly as source
python_version = "3.8"
strict = true
warn_unused_ignores = true
warn_return_any = true
# No test ignore override: tests are checked strictly

[tool.hatch.envs.publish]
dependencies = [
    "build",
    "twine",
]

[tool.hatch.envs.publish.scripts]
build = "python -m build"
upload = "twine upload dist/*"
check = "twine check dist/*"
test-publish = [
    "python -m build",
    "twine check dist/*",
    "twine upload --repository testpypi dist/*"
]
